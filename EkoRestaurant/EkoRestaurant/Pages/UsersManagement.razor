@page "/users-management"
@using EkoRestaurant.Data
@using System.Security.Claims
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService


<div class="page-title dark-color">Gestion des utilisateurs</div>

<MudButton Style="margin-bottom: 40px" Class="btn-mud-gradiant-bg-rounded h6-quicksand" OnClick="@AddNewUser" Variant="Variant.Filled">
    <img src="Images/white-add-plus.svg"/>Ajouter un utilisateur
</MudButton>


@* TODO: display roles *@
<MudTable T="ApplicationUser" Items="@ColUsers" Hover="true">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Username</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
    </RowTemplate>
</MudTable>


@code {

    // for complete tutorial:
    // see https://blazorhelpwebsite.com/ViewBlogPost/21

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ClaimsPrincipal CurrentUser;

    ApplicationUser objUser { get; set; } = new ApplicationUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";

    List<ApplicationUser> ColUsers = new List<ApplicationUser>();
    List<string> Options = new List<string>() {ApplicationDbInitialiser.EMPLOYEE_ROLE_NAME, ApplicationDbInitialiser.ADMINISTRATOR_ROLE_NAME};
    string strError = "";

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        GetUsers();
    }

    async Task AddNewUser()
    {
    // Make new user
        DialogEditCreateUserData dialogData = new DialogEditCreateUserData();
        var parameters = new DialogParameters();
        parameters.Add("DialogData", dialogData);
        var dialog = DialogService.Show<DialogEditCreateUser>("Ajouter un utilisateur", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = (DialogEditCreateUserData) result.Data;
            res.User.Email = "account@ekorestaurant.ch";
            res.User.EmailConfirmed = true;
            var identityResult = await _UserManager.CreateAsync(res.User, res.Password);
            if (!string.IsNullOrWhiteSpace(res.Role))
            {
                _ = await _UserManager.AddToRoleAsync(res.User, res.Role);
            }
            
        }
        
        GetUsers();
    }

    private async Task ChangePasswordOfUser(String userId, String newPassword)
    {
        
    }
    
    async Task DeleteUserById(String userId)
    {
        var user = await _UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            await _UserManager.DeleteAsync(user);
        }
        GetUsers();
    }
    

    public void GetUsers()
    {
        strError = "";
        ColUsers = new List<ApplicationUser>();
        var user = _UserManager.Users.Select(x => new ApplicationUser()
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            FirstName =  x.FirstName,
            LastName = x.LastName,
        });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }


}