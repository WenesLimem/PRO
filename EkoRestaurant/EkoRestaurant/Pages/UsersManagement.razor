@page "/users-management"
@using EkoRestaurant.Data
@using System.Security.Claims
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService


<div class="page-title dark-color">Gestion des utilisateurs</div>

<MudButton Style="margin-bottom: 40px" Class="btn-mud-gradiant-bg-rounded h6-quicksand" OnClick="@AddNewUser" Variant="Variant.Filled">
    <img src="Images/white-add-plus.svg"/>Ajouter un utilisateur
</MudButton>

@if (ShowPopup)
{
    <!-- This is the popup to create or edit a user -->
    <div class="modal" tabindex="-1" style="display: block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edit User</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current user -->
                <div class="modal-body">
                    <!-- Only show Id if not a new user -->
                    @if (objUser.Id != "")
                    {
                        <p>@objUser.Id</p>
                    }
                    <!-- Only allow edit if a new user -->
                    @if (objUser.Id != "")
                    {
                        <p>@objUser.UserName</p>
                    }
                    else
                    {
                        <input class="form-control" type="text"
                               placeholder="UserName"
                               @bind="objUser.UserName"/>
                    }
                    <input class="form-control" type="text"
                           placeholder="Email"
                           @bind="objUser.Email"/>
                    <input class="form-control" type="password"
                           placeholder="Password"
                           @bind="objUser.PasswordHash"/>
                    <select class="form-control"
                            @bind="@CurrentUserRole">
                        @foreach (var option in Options)
                        {
                            <option value="@option">
                                @option
                            </option>
                        }
                    </select>
                    <br/><br/>
                    <!-- Button to save the user -->
                    <button class="btn btn-primary"
                            @onclick="SaveUser">
                        Save
                    </button>
                    <!-- Only show delete button if not a new record -->
                    @if (objUser.Id != "")
                    {
                        <!-- Button to delete the forecast -->
                        <button class="btn btn-danger"
                                @onclick="DeleteUser">
                            Delete
                        </button>
                    }
                    <br/>
                    <span style="color: red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}


<MudTable T="ApplicationUser" Items="@ColUsers" Hover="true">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Username</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
    </RowTemplate>
</MudTable>


@code {

    // for complete tutorial:
    // see https://blazorhelpwebsite.com/ViewBlogPost/21

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ClaimsPrincipal CurrentUser;

    ApplicationUser objUser { get; set; } = new ApplicationUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";

    List<ApplicationUser> ColUsers = new List<ApplicationUser>();
    List<string> Options = new List<string>() {"Employee", "Administrator"};
    string strError = "";
    bool ShowPopup = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        GetUsers();
    }

    async Task AddNewUser()
    {
    // Make new user
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<DialogEditCreateUser>("Ajouter un utilisateur", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = (ApplicationUser) result.Data;
            res.PasswordHash = "*****";
            objUser = res;
        }
    }

    async Task SaveUser()
    {
        try
        {
            if (objUser.Id != "")
            {
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                user.Email = objUser.Email;
                await _UserManager.UpdateAsync(user);
    
                if (objUser.PasswordHash != "*****")// Only update password if the current value is not the default value
                {
                    var resetToken =
                        await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser =
                        await _UserManager.ResetPasswordAsync(
                            user,
                            resetToken,
                            objUser.PasswordHash);
                    if (!passworduser.Succeeded){
                        if (passworduser.Errors.FirstOrDefault() != null){
                            strError = passworduser
                                    .Errors
                                    .FirstOrDefault()
                                    .Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        return;
                    }
                }
                var UserResult =
                    await _UserManager
                        .IsInRoleAsync(user, "Administrator");
                if ((CurrentUserRole == "Administrator") & (!UserResult)){
                    await _UserManager
                        .AddToRoleAsync(user, "Administrator");
                }
                else {
                        if ((CurrentUserRole != "Administrator") & (UserResult))
                    {
                        await _UserManager
                            .RemoveFromRoleAsync(user, "Administrator");
                    }
                }
            }
            else
            {
                var NewUser =
                    new ApplicationUser()
                    {
                        UserName = objUser.UserName,
                        Email = objUser.Email
                    };
                var CreateResult =
                    await _UserManager
                        .CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult
                        .Errors
                        .FirstOrDefault() != null)
                    {
                        strError =
                            CreateResult
                                .Errors
                                .FirstOrDefault()
                                .Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    return;
                }
                else
                {
                    if (CurrentUserRole == "Administrator")
                    {
                        await _UserManager
                            .AddToRoleAsync(NewUser, "Administrator");
                    }
                }
            }
            ShowPopup = false;
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task EditUser(ApplicationUser _IdentityUser)
    {
    // Set the selected user
    // as the current user
        objUser = _IdentityUser;
    // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
    // Is user in administrator role?
            var UserResult =
                await _UserManager
                    .IsInRoleAsync(user, "Administrator");
            if (UserResult)
            {
                CurrentUserRole = "Administrator";
            }
            else
            {
                CurrentUserRole = "Employee";
            }
        }
    // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteUser()
    {
    // Close the Popup
        ShowPopup = false;
    // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
    // Delete the user
            await _UserManager.DeleteAsync(user);
        }
    // Refresh Users
        GetUsers();
    }

    void ClosePopup()
    {
    // Close the Popup
        ShowPopup = false;
    }


    public void GetUsers()
    {
    // clear any error messages
        strError = "";
    // Collection to hold users
        ColUsers = new List<ApplicationUser>();
    // get users from _UserManager
        var user = _UserManager.Users.Select(x => new ApplicationUser()
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }


}