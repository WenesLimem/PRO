@page "/create-command"
@using EkoRestaurant.Data.Entities
@using EkoRestaurant.Data
@using EkoRestaurant.Services
@inject RecipesService RecipesService
@inject IngredientsService IngredientsService
@inject ClientCommandService ClientCommandService
@inject RecipeCategoriesService RecipeCategoriesService
@inject NavigationManager NavigationManager
@attribute [Authorize]


<MudGrid>
    <MudItem xs="12">
        <div class="page-title dark-color">Nouvelle Commande</div>
    </MudItem>
    <MudItem xs="12">
        <MudButton Style="float: left" Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@LaunchValidationOfCommande" Variant="Variant.Filled"><img src="Images/gradiant-add-negative.svg" style="margin-right: 5px">Valider la commande</MudButton>
    </MudItem>

    <MudItem xs="12">
        <MudTextField @bind-Value="@Name" Immediate="true" Label="Nom du client" />
        <MudTextField @bind-Value="@Phone" Immediate="true" Label="Numéro de téléphone du client" />
    </MudItem>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Style="width: 100%;">
        @foreach (var category in RecipeCategoriesAvailable)
        {
            <MudTabPanel Text="@category.Name">
                <MudTable T="Recipe" Items="@GetRecipeOfCategory(category)">
                    <HeaderContent>
                        <MudTh>Nr</MudTh>
                        <MudTh>Nom</MudTh>
                        <MudTh>Ajouter</MudTh>
                        <MudTh>Commandé</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nr">@context.Id</MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="ajouter">
                            <MudFab OnClick=@(() => AddElement(context)) Color="Color.Primary" Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" IconSize="Size.Small" Label="Ajouter" Class="ma-2" />
                            <MudFab OnClick=@(() => RemoveElement(context)) Color="Color.Error" Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" IconSize="Size.Small" Label="Enlever" Class="ma-2" />
                        </MudTd>
                        <MudTh>
                            @GetNombreOrdered(context)
                        </MudTh>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
        }
    </MudTabs>
</MudGrid>

@code {

    ClientCommand Commmande { get; set; } = new();
    List<RecipeCategory> RecipeCategoriesAvailable { get; set; } = new();
    public string Name { get; set; } = "";
    public string Phone { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        Commmande.DateTimeOrder = DateTime.Now;
        Commmande.State = OrderState.ORDERED;
        RecipeCategoriesAvailable = RecipeCategoriesService.Filter().ToList();
    }

    List<Recipe> GetRecipeOfCategory(RecipeCategory recipeCategory)
    {
        var res = recipeCategory.Recipes.ToList();
        return res;
    }


    private void AddElement(Recipe context)
    {
        ClientCommandElement element = new ClientCommandElement()
        {
            Recipe = context,
            Quantity = 1,
            Remark = "",
        };
        Commmande.Elements.Add(element);
    }

    private void LaunchValidationOfCommande()
    {
        ClientCommand commandToCreate = Commmande;
        Commmande = new();
        // verify that we have the ingredients, make a list with (ingredientId, quantity) for the complete command
        Dictionary<int, int> countByIngredientId = new Dictionary<int, int>();
        foreach (var element in commandToCreate.Elements)
        {
            // recipe level
            foreach (var ingredientQuantity in element.Recipe.IngredientQuantities)
            {
                var ingId = ingredientQuantity.Ingredient.Id;
                try
                {
                    countByIngredientId.Add(ingId, ingredientQuantity.Quantity * element.Quantity);
                }
                catch (Exception e)
                {
                    countByIngredientId[ingId] += ingredientQuantity.Quantity * element.Quantity;
                }
                if (IngredientsService.GetById(ingId).UnitInStock < countByIngredientId[ingId])
                {
                    // TODO; alert cannot verify because missing ingredients
                    Commmande = commandToCreate;
                    return;
                }
            }
        }
        // TODO snackbar
        commandToCreate.DateTimeOrder = DateTime.Now;
        commandToCreate.ClientName = Name;
        commandToCreate.ClientPhone = Phone;
        ClientCommandService.Create(commandToCreate);
        ClientCommandService.SaveChanges();
        Commmande = new ClientCommand();
        Phone = "";
        Name = "";
        NavigationManager.NavigateTo("commandes");
    }

    private int GetNombreOrdered(Recipe context)
    {
        var count = 0;
        var elements = Commmande.Elements.Where((x) => x.Recipe.Id == context.Id);
        foreach (ClientCommandElement clientCommandElement in elements)
        {
            count += clientCommandElement.Quantity;
        }

        return count;
    }

    private void RemoveElement(Recipe context)
    {
        Commmande.Elements.RemoveAll((x) => x.Recipe.Id == context.Id);
    }

}