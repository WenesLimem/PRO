@page "/recipes/{Id:int}"
@using EkoRestaurant.Services
@using EkoRestaurant.Data
@using EkoRestaurant.Extensions
@inject RecipesService RecipesService
@inject RecipeCategoriesService RecipeCategoriesService
@inject RecipeIngredientQuantitiesService RecipeIngredientQuantitiesService
@inject IngredientsService IngredientsService
@inject ISnackbar Snackbar
@inject IDialogService Dialogservice
@inject NavigationManager nm

<MudGrid>
    <MudItem xs="12">
        <div class="page-title dark-color">Recettes</div>
        <div class="h2-quicksand dark-color">@CurrentRecipe.Name</div>
    </MudItem>
    <MudItem xs="12">
        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" Style="float: right;" ButtonType="ButtonType.Submit" OnClick="@DeleteRecipe"></MudIconButton>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public int Id { get; set; }

    public List<RecipeIngredientQuantity> ListIngredient = new();
    public List<Ingredient> Ingredients = new();

    public Recipe CurrentRecipe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Ingredients = IngredientsService.Filter().ToList();
        await getData();
    }

    private async Task getData()
    {
        CurrentRecipe = RecipesService.GetById(Id);
        if (CurrentRecipe.CategoryId != 0 && CurrentRecipe.Category == null && CurrentRecipe.CategoryId != null)
        {
            CurrentRecipe.Category = RecipeCategoriesService.GetById((int)CurrentRecipe.CategoryId);
        }
    }

    private void DeleteRecipe()
    {
        RecipesService.Delete(CurrentRecipe);
        RecipesService.SaveChanges();
        Snackbar.Add("Supression effectuée avec succès", Severity.Success);
        nm.NavigateTo("/recipes");
    }

}
