@page "/ingredients"
@using EkoRestaurant.Services
@using EkoRestaurant.Data
@using EkoRestaurant.Extensions
@inject IngredientsService IngredientsService
@inject IngredientCategoriesService IngredientCategoriesService
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudGrid>
    <MudItem xs="12">
        <div class="page-title dark-color">Ingredients</div>
    </MudItem>
    <MudItem xs="12">

        <MudButton Style="float: right" Class="btn-mud-gradiant-bg-rounded h6-quicksand" OnClick="@OpenAddIngredientDialog" Variant="Variant.Filled"><img src="Images/white-add-plus.svg" />Ajouter</MudButton>
        @if (SelectedCategory != null)
        {
            <MudButton Style="float: right; margin-right: 12px" Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@OpenAddDeleteCategoryDialog" Variant="Variant.Filled"><img src="Images/gradiant-delete-negative.svg" />Supprimer la catégorie</MudButton>
        }
    </MudItem>
    <MudItem xs="4">
        <div class="data-grid-categories-title">
            <MudIcon Icon="@Icons.Material.Filled.StarRate" Style="margin-right: 12px"></MudIcon>Catégories
        </div>
        <div class="flex-column">

            @if (IngredientCategories.Count > 0)
            {
                @foreach (IngredientCategory category in IngredientCategories)
                {
                    <div @onclick="() => SelectCategoryInSideBar(category)">
                        <IngredientCategorySideBar Category="@category" Selected="@(category == SelectedCategory)"/>
                    </div>
                }
            }
            <div class="small-separator"/>
            <MudButton Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@OpenIngredientCategoryDialog" Variant="Variant.Filled" FullWidth="true"><img src="Images/gradiant-add-plus.svg"/>Nouvelle catégorie</MudButton>
        </div>

    </MudItem>
    <MudItem xs="8">
        @* TODO: sortable columns *@
        <MudTable T="Ingredient" Items="@Ingredients" Hover="true" OnRowClick="@ClickedRow">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Ingredient, object>(x=>x.Name)">Nom</MudTableSortLabel></MudTh>
                <MudTh>Producteur</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Ingredient, object>(x=>x.ExpirationDate)">Date d'expiration</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Ingredient, object>(x=>x.UnitInStock)">Qte en stock</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Ingredient, object>(x=>x.UnitPrice)">Prix</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Nom">@context.Name</MudTd>
                <MudTd DataLabel="Producteur">@context.Producer</MudTd>
                <MudTd DataLabel="Date d'expiration">@context.ExpirationDate.Nice()</MudTd>
                <MudTd DataLabel="Qte en stock">@context.UnitInStock</MudTd>
                <MudTd DataLabel="Prix">@context.UnitPrice</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    public IngredientCategory CategoryToAdd { get; set; } = new();

    public List<IngredientCategory> IngredientCategories = new();

    public IngredientCategory SelectedCategory { get; set; }

    public List<Ingredient> Ingredients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IngredientCategories = IngredientCategoriesService.Filter().ToList();
        await GetIngredientsData();
    }

    public async Task SelectCategoryInSideBar(IngredientCategory category)
    {
        SelectedCategory = SelectedCategory == category ? null : category;
        await GetIngredientsData();
    }

    public async Task OpenIngredientCategoryDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Category", CategoryToAdd);

        var dialog = DialogService.Show<DialogEditCreateIngredientCategory>("Nouvelle catégorie", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = (IngredientCategory) result.Data;
            IngredientCategoriesService.Create(res);
            IngredientCategoriesService.SaveChanges();
            IngredientCategories.Add(res);
            StateHasChanged();
        }
    }

    public async Task OpenAddIngredientDialog()
    {
        var dialog = DialogService.Show<DialogEditCreateIngredient>("Ajouter ingrédient");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = (Ingredient) result.Data;
            IngredientsService.Create(res);
            IngredientsService.SaveChanges();
            if (res.Category == SelectedCategory || SelectedCategory == null)
            {
                Ingredients.Add(res);
            }
            var currentCat = SelectedCategory;
            SelectedCategory = new();
            SelectedCategory = currentCat;
        }
    }

    public async Task OpenAddDeleteCategoryDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("TextToDisplay", "Veuillez confirmer la suppression de la catégorie " + SelectedCategory.Name + ", cela necessite de ne plus avoir d'ingrédient dans cette catégorie.");
        parameters.Add("ButtonOkText", "Supprimer");
        var dialog = DialogService.Show<DialogConfirm>("Supprimer la catégorie", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data.Equals(true))
        {
            if (SelectedCategory.Ingredients.Count > 0)
            {
                // snackbar error
                return;
            }
            IngredientCategories.Remove(SelectedCategory);
            IngredientCategoriesService.Delete(SelectedCategory.Id);
            IngredientCategoriesService.SaveChanges();
            SelectedCategory = null;
            await GetIngredientsData();
            StateHasChanged();
        }

    // TODO: implement me
        // faire un dialog générique de confirmation de suppression
    }

    public void ClickedRow(TableRowClickEventArgs<Ingredient> clickEvent)
    {
        System.Console.WriteLine(clickEvent.Item.Name);
        // TODO: navigation to detail page
    }
    
    private async Task GetIngredientsData()
    {
        Ingredients = SelectedCategory == null ? IngredientsService.Filter().ToList() : SelectedCategory.Ingredients;
    }

}