@page "/ingredients/{Id:int}"
@using EkoRestaurant.Services
@using EkoRestaurant.Data
@using EkoRestaurant.Extensions
@inject IngredientsService IngredientsService
@inject IngredientCategoriesService IngCatService
@inject ISnackbar Snackbar
@inject IDialogService Dialogservice
@inject NavigationManager nm


<MudGrid>
    <MudItem xs="12">
        <div class="page-title dark-color">Stocks</div>
        <div class="h2-quicksand dark-color">@currentIngredient.Name</div>
    </MudItem>
    <MudItem xs="12">

        <MudButton Style="float: left" Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@AddIngredientToList" Variant="Variant.Filled"><img src="Images/gradiant-add-negative.svg" style="margin-right: 5px">Ajouter à la liste des course</MudButton>
        <MudButton Style="float: left; margin-left: 10px" Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@OpenModifiyIngredientDialog" Variant="Variant.Filled"><img src="Images/gradiant-add-negative.svg" style="margin-right: 5px">Editer</MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" Style="float: right;" ButtonType="ButtonType.Submit" OnClick="@DeleteIngredient"></MudIconButton>
    </MudItem>

    <MudItem xs="3">
        <MudCard Elevation="4">
            <MudCardContent>
                <MudText >Prix</MudText>
                <MudText Class="details-grid-content dark-color">@currentIngredient.UnitPrice CHF</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Elevation="4">
            <MudCardContent>
                <MudText >Restant</MudText>
                <MudText Class="details-grid-content" Color="Color.Error">@currentIngredient.UnitInStock pce</MudText>
            </MudCardContent>
        </MudCard>

    </MudItem>
    <MudItem xs="3">
        <MudCard Elevation="4">
            <MudCardContent>
                <MudText >Date de préemption</MudText>
                <MudText Class="details-grid-content" Color="Color.Info">@currentIngredient.ExpirationDate </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Elevation="4">
            <MudCardContent>
                <MudText >Fournisseur</MudText>
                @if (currentIngredient.Producer == null)
                {
                    <MudText Class="details-grid-content dark-color"> - </MudText>
                }
                else
                {
                    <MudText Class="details-grid-content dark-color">@currentIngredient.Producer </MudText>
                }
            </MudCardContent>
        </MudCard>
        </MudItem>

        <MudItem xs="6">
            <MudCard Elevation="4">

                <MudCardContent>
                    <MudText >Catégorie</MudText>
                    <MudText Class="details-grid-content dark-color">@GetCurrentCategoryName() </MudText>

                </MudCardContent>
            </MudCard>
        </MudItem>

 
    <MudItem xs="3">
        <MudCard Elevation="4">
            <MudCardContent>
                <MudText >Vegan</MudText>
                <MudText Class="details-grid-content" Color="Color.Success">@GetVegan()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard Elevation="4">
            <MudCardContent>
                <MudText >Allergènes</MudText>
                <MudText  Typo="Typo.h5" Color="Color.Dark">@currentIngredient.Allergenes</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    
        <MudItem xs="12">
            <MudCard Elevation="4">
                <MudCardContent>
                     <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
                </MudCardContent>
            </MudCard>
        </MudItem>
    
    
            



</MudGrid>


@code {

    [Parameter]
    public int Id { get; set; }

    public List<Ingredient> listeDesCourse = new();

    public Ingredient currentIngredient { get; set; }
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Suivi de consommation", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } }
        
    };
    public string[] XAxisLabels = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    protected override async Task OnInitializedAsync()
    {
        await getData();
    }

    private async Task getData()
    {
        currentIngredient = IngredientsService.GetById(Id);
        if (currentIngredient.CategoryId != 0 && currentIngredient.Category == null && currentIngredient.CategoryId != null)
        {
            currentIngredient.Category = IngCatService.GetById((int) currentIngredient.CategoryId);
        }
    }

    private void AddIngredientToList()
    {
        listeDesCourse.Add(currentIngredient);
        Snackbar.Add(currentIngredient.Name + " ajouté à la liste des courses", severity: Severity.Success);
    }

    private async void OpenModifiyIngredientDialog()
    {
        var param = new DialogParameters();
        param.Add("CurrentIngredient", currentIngredient);
        var dialog = Dialogservice.Show<DialogEditCreateIngredient>("Modifier :", param);
        var res = await dialog.Result;
        if (!res.Cancelled)
        {
            var result = (Ingredient) res.Data;
            try
            {
                var editRes = IngredientsService.Edit(result);
                IngredientsService.SaveChanges();
                Snackbar.Add("Modifications sauvegardées avec succées.", Severity.Success);
            }
            catch (Exception e)
            {
                Snackbar.Add("Erreur est survenue lors du modéficaiton", Severity.Error);
            }
        }
        StateHasChanged();
    }

    private void DeleteIngredient()
    {
        IngredientsService.Delete(currentIngredient);
        IngredientsService.SaveChanges();
        Snackbar.Add("Deleted successfully ", Severity.Success);
        nm.NavigateTo("/ingredients");
    }

    string GetCurrentCategoryName() => currentIngredient.Category != null ? currentIngredient.Category.Name : "N / A";

    private String GetVegan()
    {
        if (currentIngredient.Vegan == true)
        {
            return "Oui";
        }
        else
        {
            return "Non";
        }
    }

}