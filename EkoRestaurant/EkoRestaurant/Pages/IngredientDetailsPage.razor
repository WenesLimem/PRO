@page "/ingredients/{Id:int}"
@using EkoRestaurant.Services
@using EkoRestaurant.Data
@using EkoRestaurant.Extensions
@inject IngredientsService IngredientsService
@inject IngredientCategoriesService IngCatService
@inject ISnackbar Snackbar
@inject IDialogService Dialogservice
@inject NavigationManager nm
@inject ListeDesCoursesServices ListeDesCoursesServices
@inject ListeDesCoursesElementService ListeDesCoursesElementService
@attribute [Authorize]

<MudGrid>
    <MudItem xs="12">
        <div class="page-title dark-color">Stocks</div>
        <div class="h2-quicksand dark-color">@currentIngredient.Name</div>
    </MudItem>
    <MudItem xs="12">
        <MudButton Style="float: left" Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@AddIngredientToList" Variant="Variant.Filled"><img src="Images/gradiant-add-negative.svg" style="margin-right: 5px">Ajouter à la liste des course</MudButton>
        <MudButton Style="float: left; margin-left: 10px" Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@OpenModifiyIngredientDialog" Variant="Variant.Filled"><img src="Images/EditGradient.svg" style="margin-right: 5px">Editer</MudButton>
        <MudButton Style="float: left; margin-left: 10px" Class="btn-mud-white-bg-rounded h6-quicksand" OnClick="@DeleteIngredient" Variant="Variant.Filled"><img src="Images/gradient-bin.svg" style="margin-right: 5px">Supprimer</MudButton>
    </MudItem>

    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudText>Prix unitaire</MudText>
                <MudText Class="details-grid-content dark-color">@currentIngredient.UnitPrice CHF</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudText>Restant</MudText>
                <MudText Class="details-grid-content" Color="Color.Info">@currentIngredient.UnitInStock @currentIngredient.UnitSuffix</MudText>
            </MudCardContent>
        </MudCard>

    </MudItem>
    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudText>Date de péremption</MudText>
                <MudText Class="details-grid-content" Color="Color.Info">@currentIngredient.ExpirationDate.Nice() </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudText>Fournisseur</MudText>
                <MudText Class="details-grid-content dark-color">@currentIngredient.GetProducerName() </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">

            <MudCardContent>
                <MudText>Catégorie</MudText>
                <MudText Class="details-grid-content dark-color"> @currentIngredient.GetCategoryName()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudText>Vegan friendly</MudText>
                <MudText Class="details-grid-content" Color="Color.Success">@currentIngredient.IsVegan.BooleanToFrench()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudText>Arachides free</MudText>
                <MudText Class="details-grid-content" Color="Color.Success">@currentIngredient.ContainsArachides.BooleanToFrench()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudText>Lactoses free</MudText>
                <MudText Class="details-grid-content" Color="Color.Success">@currentIngredient.ContainsLactose.BooleanToFrench()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12">
        <MudCard Elevation="4" Class="rounded-card">
            <MudCardContent>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@code {

    [Parameter]
    public int Id { get; set; }

    public ListeDesCoursesElement ListeDesCoursesElement { get; set; } = new ListeDesCoursesElement();

    public Ingredient currentIngredient { get; set; }

    public List<ChartSeries> Series = new List<ChartSeries>()
{
        new ChartSeries() {Name = "Suivi de consommation", Data = new double[] {90, 79, 72, 69, 62, 62, 55, 65, 70}}
    };

    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    protected override async Task OnInitializedAsync()
    {
        await getData();
    }

    private async Task getData()
    {
        currentIngredient = IngredientsService.GetById(Id);
        if (currentIngredient.CategoryId != 0 && currentIngredient.Category == null && currentIngredient.CategoryId != null)
        {
            currentIngredient.Category = IngCatService.GetById((int)currentIngredient.CategoryId);
        }
    }
    private void AddElement(Ingredient ingredient, int qty)
    {

        var element = new ListeDesCoursesElement()
        {
            Quantity = qty,
            Ingredient = ingredient,
            ListeDesCourses = ListeDesCoursesServices.GetActiveListeDesCourses()
        };
        var created = ListeDesCoursesElementService.Create(element);
        ListeDesCoursesElementService.SaveChanges();
        ListeDesCoursesServices.AddIngredientToCurrent(created);

    }
    private void AddIngredientToList()
    {
        try
        {
            AddElement(currentIngredient, currentIngredient.UnitAtStart);
            Snackbar.Add(currentIngredient.Name + " ajouté à la liste des courses", severity: Severity.Success,
                config =>
                {
                    config.Action = "Afficher la liste des courses";
                    config.ActionColor = Color.Surface;
                    config.Onclick = async snackbar =>
                    {
                        ViewListe();
                    };

                });
        }
        catch (Exception e)
        {
            Snackbar.Add("Une erreur est survenue lors de l'ajout du produit à la liste des courses.", severity: Severity.Error);

        }

    }

    private void ViewListe()
    {
        nm.NavigateTo("/listedescourses");
    }

    private async void OpenModifiyIngredientDialog()
    {
        var param = new DialogParameters();
        param.Add("CurrentIngredient", currentIngredient);
        var dialog = Dialogservice.Show<DialogEditCreateIngredient>("Modifier :", param);
        var res = await dialog.Result;
        if (!res.Cancelled)
        {
            var result = (Ingredient)res.Data;
            try
            {
                var editRes = IngredientsService.Edit(result);
                IngredientsService.SaveChanges();
                Snackbar.Add("Modifications sauvegardées avec succès.", Severity.Success);
            }
            catch (Exception e)
            {
                Snackbar.Add("Erreur est survenue lors de l'édition", Severity.Error);
            }
        }
        StateHasChanged();
    }

    private void DeleteIngredient()
    {
        IngredientsService.Delete(currentIngredient.Id);
        IngredientsService.SaveChanges();
        Snackbar.Add("Suppression effectuée avec succès ", Severity.Success);
        nm.NavigateTo("/ingredients");
    }

}