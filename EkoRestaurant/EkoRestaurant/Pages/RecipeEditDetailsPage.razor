@page "/recipes/edit/{Id:int}"
@using EkoRestaurant.Services
@using EkoRestaurant.Data
@using EkoRestaurant.Extensions
@inject RecipesService _RecipesService
@inject RecipeCategoriesService _RecipeCategoriesService
@inject RecipeIngredientQuantitiesService _RecIngQtySer
@inject IngredientsService _IngredientsService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager _NavigationManager

@using Microsoft.Extensions.Logging
@inject ILogger<RecipeEditDetailsPage> Logger

<MudGrid>
    <MudItem xs="12">
        <div class="page-title dark-color">Recettes</div>
        <div class="h2-quicksand dark-color">Éditer @CurrentRecipe.Name</div>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudForm @ref="RecipeEditionForm">
                    <MudTextField T="string" @bind-Value="@CurrentRecipe.Name" Label="Nom"
                                  Required="true" RequiredError="@recNameError" Variant="Variant.Outlined" />
                    <MudTextField T="string" @bind-Value="@CurrentRecipe.Description" Label="Description"
                                  Required="true" RequiredError="@recDescError" Variant="Variant.Outlined" />
                    <MudTextField T="double" @bind-Value="@CurrentRecipe.PreparationTimeMinutes" Label="Temps de préparation (minutes)"
                                  Required="true" RequiredError="@recTimePrepError" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentText="minutes" />
                    <MudTextField T="double" @bind-Value="@CurrentRecipe.Price" Label="Prix"
                                  Required="true" RequiredError="@recPriceError" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentText="CHF" />
                    <MudTable T="RecipeIngredientQuantity" Items="@CurrentRecipe.IngredientQuantities">
                        <HeaderContent>
                            <MudTh>Ingrédient</MudTh>
                            <MudTh>Quantité</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Ingrédient">@context.Ingredient.Name</MudTd>
                            <MudTd DataLabel="Quantité">@context.Quantity</MudTd>
                            <MudTd DataLabel="Action">
                                <MudIconButton Icon="@Icons.Filled.Clear" OnClick="() => DeleteIng(context)">Supprimer</MudIconButton>
                                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditIng(context)">Modifier</MudIconButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    <MudIconButton Icon="@Icons.Filled.Add" OnClick="AddIng"></MudIconButton>
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudIconButton Icon="@Icons.Filled.Check" OnClick="Submit">Sauvegarder</MudIconButton>
                <MudIconButton Icon="@Icons.Filled.Clear" ButtonType="ButtonType.Submit" OnClick="Cancel">Annuler</MudIconButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public int Id { get; set; }

    public List<Ingredient> IngredientsAvailable = new();

    public Recipe CurrentRecipe { get; set; }

    public MudForm RecipeEditionForm { get; set; }

    String recNameError = "Un nom est requis";
    String recDescError = "Une description est requise";
    String recTimePrepError = "Un temps de préparation est requis";
    String recPriceError = "Un prix est requis";


    protected override async Task OnInitializedAsync()
    {
        IngredientsAvailable = _IngredientsService.Filter().ToList();
        await GetData();
    }

    private async Task GetData()
    {
        CurrentRecipe = _RecipesService.GetByIdWithIngredients(Id);
    }

    private async Task Submit()
    {
        try
        {
            foreach (var ing in CurrentRecipe.IngredientQuantities)
            {
                _RecIngQtySer.Edit(ing);
                _RecIngQtySer.SaveChanges();
            }
            _RecipesService.Edit(CurrentRecipe);
            _RecipesService.SaveChanges();
            Snackbar.Add("Modifications sauvegardées avec succès.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("Erreur est survenue lors de l'édition", Severity.Error);
        }

        StateHasChanged();

        _NavigationManager.NavigateTo($"/recipes/{CurrentRecipe.Id}");
    }

    private void Cancel()
    {
        RecipeEditionForm.Reset();
        _NavigationManager.NavigateTo($"/recipes/{CurrentRecipe.Id}");
    }

    private void DeleteIng(RecipeIngredientQuantity ingredient)
    {
        _RecIngQtySer.Delete(ingredient);
        _RecIngQtySer.SaveChanges();
    }

    public async Task EditIng(RecipeIngredientQuantity ingredient)
    {
        var param = new DialogParameters();
        param.Add("newRecIng", ingredient);
        var dialog = DialogService.Show<DialogAddRecipeIngredientQuantity>("Ajouter ingrédient", param);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = (RecipeIngredientQuantity)result.Data;
            CurrentRecipe.IngredientQuantities.Remove(ingredient);
            CurrentRecipe.IngredientQuantities.Add(res);
        }
    }

    public async Task AddIng()
    {
        var dialog = DialogService.Show<DialogAddRecipeIngredientQuantity>("Ajouter ingrédient");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = (RecipeIngredientQuantity)result.Data;
            CurrentRecipe.IngredientQuantities.Add(res);
        }
    }

}
