@using EkoRestaurant.Data
@using BlazorTable
@using EkoRestaurant.Services
@inject IngredientsService IngredientsService

<Table TableItem="Ingredient" Items="Ingredients">
    <Column TableItem="Ingredient" Title="Id" Field="@(x => x.Id)" Sortable="true" Filterable="true" Width="10%" DefaultSortColumn="true"/>
    <Column TableItem="Ingredient" Title="Nom" Field="@(x => x.Name)" Sortable="true" Filterable="true" Width="20%"/>
    <Column TableItem="Ingredient" Title="Producteur" Field="@(x => x.Producer)" Sortable="true" Filterable="true" Width="20%"/>
    <Column TableItem="Ingredient" Title="Date d'expiration" Field="@(x => x.ExpirationDate)" Sortable="true" Filterable="true" Width="20%"/>
    <Column TableItem="Ingredient" Title="Qte en stock" Field="@(x => x.UnitInStock)" Sortable="true" Filterable="true" Width="20%"/>
    <Column TableItem="Ingredient" Title="Prix" Field="@(x => x.UnitPrice)" Sortable="true" Filterable="true" Width="20%"/>
</Table>

@code {

    [Parameter]
    public IngredientCategory ParentCategory
    {
        get => _parentCategory;
        set
        {
            _parentCategory = value;
            RefreshMe();
        }
    }

    public List<Ingredient> Ingredients { get; set; } = new List<Ingredient>();

    protected override Task OnInitializedAsync()
    {
        getData();
        // for more informations: https://github.com/IvanJosipovic/BlazorTable/blob/master/src/BlazorTable.Sample.Shared/Pages/Index.razor
        return base.OnInitializedAsync();
    }


    public void RefreshMe()
    {
        getData();
        StateHasChanged();
    }

    private async Task getData()
    {
        if (ParentCategory == null)
        {
            Ingredients = IngredientsService.Filter().ToList();
        }
        else
        {
            Ingredients = ParentCategory.Ingredients;
        }
    }

    private IngredientCategory _parentCategory;
}