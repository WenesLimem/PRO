@using EkoRestaurant.Data
@using EkoRestaurant.Services

@* @inject IngredientCategoriesService IngredientCategoriesService *@
@inject RecipeCategoriesService RecipeCategoriesService

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudSelect T="RecipeCategory" @bind-Value="@CurrentRecipe.Category" Label="Catégorie" ToStringFunc="@(e => e == null ? null : $"{e.Name}")">
                @foreach (var cat in CategoriesAvailable)
                {
                    <MudSelectItem Value="@cat" />
                }
            </MudSelect>
            <MudTextField @bind-Value="CurrentRecipe.Name" Label="Nom" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="CurrentRecipe.Description" Label="Description" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="CurrentRecipe.PreparationTimeMinutes" T="double" Label="Temps de préparation (en minute)"></MudTextField>
            <MudTextField @bind-Value="CurrentRecipe.Price" T="double" Label="Prix"></MudTextField>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Recipe CurrentRecipe { get; set; }

    public List<RecipeCategory> CategoriesAvailable { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        CategoriesAvailable = RecipeCategoriesService.Filter().ToList();
        if (CurrentRecipe == null)
        {
            CurrentRecipe = new Recipe();
        }

        return base.OnInitializedAsync();
    }

    void Cancel() => MudDialog.Cancel();

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(CurrentRecipe));
    }
}
